apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${DOMAIN}
  namespace: ${NAMESPACE}
spec:
  replicas: ${REPLICAS}
  selector:
    matchLabels:
      app: ${DOMAIN}
  strategy:
    rollingUpdate:
      maxSurge: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ${DOMAIN}
        version: ${VERSION}
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: ${DOMAIN}
        image: itmabo/${DOMAIN}:${VERSION}
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command: [ "/bin/sleep", "60" ]
        ports:
        - name: main-port
          containerPort: 8080
        volumeMounts:
        - mountPath: /home/log
          name: log-volume
        env:
        - name: VERSION
          value: ${VERSION}
        livenessProbe:
          httpGet:
            path: /actuator/info
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 3
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /actuator/info
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 3
          successThreshold: 1
          failureThreshold: 5
      volumes:
      - name: log-volume
        hostPath:
          path: /home/log
          type: DirectoryOrCreate
---

apiVersion: v1
kind: Service
metadata:
  name: ${DOMAIN}
  namespace: ${NAMESPACE}
  labels:
    app: ${DOMAIN}
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: main-port
  selector:
    app: ${DOMAIN}
  type: ClusterIP

---

apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: ${DOMAIN}
  namespace: ${NAMESPACE}
spec:
  hosts:
  - ${GATEWAY_HOST}
  gateways:
  - istio-system/ingressgateway
  http:
  - match:
    - uri:
        prefix: /${DOMAIN}
    rewrite:
      uri: /
    route:
    - destination:
        host: ${DOMAIN}
        port:
          number: 80

---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: ${DOMAIN}
  namespace: ${NAMESPACE}
spec:
  host: ${DOMAIN}
  trafficPolicy:
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http2MaxRequests: 1000
        maxRequestsPerConnection: 10
    outlierDetection:
      consecutive5xxErrors: 6
      interval: 5s
      baseEjectionTime: 5s